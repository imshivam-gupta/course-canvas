datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "referentialActions"]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum Role {
  USER
  ADMIN
  TEACHER
  MENTOR
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  role          Role         @default(USER)
  name          String?
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Submission    Submission[]
  Editor        Editor?      @relation(fields: [editorId], references: [id])
  editorId      String?      @db.ObjectId

  @@unique(email)
  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Course {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean            @default(false)
  categoryId  String?
  category    Category?          @relation(fields: [categoryId], references: [id])
  sections    Section[]
  attachments CourseAttachment[]
  purchases   Purchase[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Section {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  position    Int
  description String?
  imageUrl    String?
  isPublished Boolean   @default(false)
  deadline    DateTime  @default(now())
  weightage   Float?
  chapters    Chapter[]
  Course      Course?   @relation(fields: [courseId], references: [id])
  courseId    String?   @db.ObjectId
}

model Category {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String   @unique
  Course Course[]
}

model CourseAttachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model TopicTags {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  GODLEVEL
}

model Company {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String  @unique
  Editor   Editor? @relation(fields: [editorId], references: [id])
  editorId String? @db.ObjectId
}

model TestCase {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  Input         String
  Output        String
  Explanation   String?
  exampleEditor Editor? @relation("example", fields: [exampleRuleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hiddenEditor  Editor? @relation("hiddencases", fields: [hiddenRuleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  exampleRuleId String?
  hiddenRuleId  String?
}

model CodingLanguage {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String       @unique
  Submission Submission[]
  Editor     Editor?      @relation(fields: [editorId], references: [id])
  editorId   String?      @db.ObjectId
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SubmissionResult {
  ACCEPTED
  WRONG_ANSWER
  MEMORY_LIMIT_EXCEEDED
  OUTPUT_LIMIT_EXCEEDED
  TIME_LIMIT_EXCEEDED
  RUNTIME_ERROR
  INTERNAL_ERROR
  COMPILATION_ERROR
  TIMEOUT
}

model Submission {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  code       String
  language   CodingLanguage   @relation(fields: [languageId], references: [id])
  languageId String
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  editorId   String
  editor     Editor           @relation(fields: [editorId], references: [id])
  notes      String
  status     SubmissionStatus
  result     SubmissionResult
  runtime    String
  memory     String
}

model Editor {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  description        String
  difficulty         Difficulty
  company            Company[]
  starterCode        String
  orginalCode        String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  constraints        String[]
  hints              String[]
  example            TestCase[]       @relation("example")
  hiddencases        TestCase[]       @relation("hiddencases")
  supportedLanguages CodingLanguage[]
  submissions        Submission[]
  editorial          String
  similarProblems    Editor[]         @relation("similar")
  editor             Editor?          @relation("similar", fields: [editorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  editorId           String?
  submittedBy        User[]
  Chapter            Chapter[]
}

model Chapter {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  videoUrl      String?
  docUrl        String?
  position      Int
  isPublished   Boolean        @default(false)
  isFree        Boolean        @default(false)
  youtubeVideo  String?
  muxData       MuxData?
  userProgress  UserProgress[]
  isEditorBased Boolean        @default(false)
  editor        Editor?        @relation(fields: [editorId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Section       Section?       @relation(fields: [sectionId], references: [id])
  sectionId     String?        @db.ObjectId
  editorId      String?        @db.ObjectId
}

model MuxData {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
